const OpenAI = require('openai');
const mongoose = require('mongoose');
const fs = require('fs');
const user_records = require('../models/userSchema.js')
const products = require('../models/product.js')
const orders = require('../models/order.js')

require('dotenv').config();
const API_KEY = process.env.API_KEY

const openai = new OpenAI({
    apiKey: API_KEY
}); 

const schemasPrompt = `
                ##user_records
                    _id: A unique identifier for the document, automatically generated by MongoDB.
                    name: The user's name.
                    email: The user's email address.
                    password: The user's hashed password.
                    myReferralCode: A unique referral code generated for the user.
                    referrerCode: The referral code of the user who referred this user, or null if not applicable.
                    referralCount: The number of referrals made by the user.    

                ##products
                    _id: A unique identifier for the document, automatically generated by MongoDB.
                    category: The category to which the product belongs.
                    name: The name of the product.
                    image: The URL of the product image.
                    description: A brief description of the product.
                    price: The price of the product.

                ##orders
                    _id: A unique identifier for the document, automatically generated by MongoDB.
                    user_id: The identifier for the user who placed the order
                    cart_id: The unique identifier for the cart associated with this order.
                    products: An array of product identifiers included in the order,this is Array of foreign key of _id from products.
                    address_id: The unique identifier for the address where the order will be delivered.
                    amount: The total amount for the order.

                    #Arrays
                        products: Array of unique ids of products in products table.
            `


const getMessage = async (req, res) => {
    try {
        
        const msg = req.body.message;
        const coll = req.body.collection;
        const result = await contentGenerator(msg, coll);
        console.log(result);
    
        const queryResult = JSON.parse(result);
        console.log(queryResult.Query);
        console.log(queryResult.collection);
        // const collectionName = queryResult.Query.split('.')[1];
        // const queryName = queryResult.Query.split('.')[2].split('(')[0];
        // const queryParam = queryResult.Query.split('.')[2].split('(')[1].split(')')[0].replaceAll(' ','');
        
        // const filterStr = queryParam.split('},{')[0] + '}';
        // const projectionStr = '{' + queryParam.split('},{')[1];

        // const filter = JSON.parse(filterStr);
        // const projection = JSON.parse(projectionStr.replace(/(\w+):/g, '"$1":'));

        // console.log(collectionName,"     ", queryName,"    ", queryParam, "   ", "    ", projection,"    ",typeof projection);
        
        const Model = mongoose.model(queryResult.collection);
    
        const output = await Model.aggregate(queryResult.Query);
        
        const fileData = "Prompt : " + msg + "\nQuery : "+ JSON.stringify(queryResult.Query) +'\n' + "Result : " + JSON.stringify(output) + '\n\n';

        fs.appendFile('myFile.txt', fileData, (err) => {
            if (err) throw err;
            console.log('Saved!');
        })
        
        res.status(200).json({output});

    } catch (error) {
        console.log(error);
        res.status(500).send(error.message);
    }
}

async function contentGenerator(msg, coll) {
    try {
        const response = await openai.chat.completions.create({
            messages: [
                {
                    role:   'system',
                    content: `

                        You are a very intelligent AI assitasnt who is expert in identifying relevant questions from user and converting into
                        nosql mongodb agggregation pipeline query.
                        Note: You have to just return the query as to use in aggregation pipeline with collection nothing else. Don't return any other thing
                        Please use the below schemas to write the mongodb queries , dont use any other queries.

                        ${schemasPrompt}

                        Format your response as JSON object.
                        Follow this output pattern strictly
                        Output =
                            collection : {collection Name}
                            Query : {Query}

                        `
                },
                {
                    role: 'user',
                    content: msg
                },
            ],
            model: 'gpt-3.5-turbo',
            response_format: { type: "json_object" },
            max_tokens: 200,
            temperature: 0
        });
        
        return response.choices[0].message.content;
    } catch (error) {
        console.log(error);
        throw error;
    }
}
// ,this is foreign key of _id from user_records.




// async function storeDataintoFile(data) {
//     console.log(data);
//     const response = await openai.chat.completions.create({
//         messages: [
//             {
//                 role:   'system',
//                 content: `
//                     Your task is to store data in triple quotes into a .txt file.
//                     And return a link of the file to download.

//                     data : '''${data}'''
//                 `
//             },
//             {
//                 role: 'user',
//                 content: 'Please store data into a .txt fil and return'
//             },
//         ],
//         model: 'gpt-3.5-turbo',
//         // response_format: { type: "json_object" },
//         max_tokens: 150,
//         temperature: 0
//     });

//     return response.choices[0].message.content;

// }

module.exports.getMessage = getMessage;
